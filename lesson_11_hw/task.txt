Автозагрузка:
1. инициализировать пакет (composer init / php composer.phar init),
2. в composer.json добавить правила автозагруки (автозагрузка должна работать в src)
3. сгенерировать файлы автозагрузки (composer dump-autoload / php composer.phar dump-autoload)
4. в файле units.php подключить автозагрузчик классов
5. прописать все необходимые namespace и use

Фабричный метод для создания боевых юнитов:
В классе BattleUnit реализовать статический метод get_unit(string $type), создающий юнитов.
Метод принимает на вход строку с типом юнита, создает соответствующий объект и возвращает его.
Значения свойств здоровья, ловкости и атаки задавать рандомно rand(min, max).
Например, если в метод передана строка 'infantry' метод должен вернуть объект new Infantry,
если в метод передана строка 'knight' метод должен вернуть объект new Knight и тд

Интерфейсы
1. Объявить интерфейс RestAble с методом rest().
Данный интерфейс должны имплементировать все юниты (Unit),
при этом у каждого юнита должна быть своя реализация метода rest (каждый тип юнита отдыхает по своему)
2. Объявить интерфейс AttackAble с методом атаки противника.
Данный интерфейс должны имплементировать все боевые юниты (BattleUnit),
при этом у каждого юнита должна быть своя реализация метода атаки (каждый тип юнита атакует по своему)

В качестве дополнительной тренировки можно добавть королю возможности:
1. нанимать юнитов за золото, формировать из них армию
2. нападать своей армией на армию другого короля